# .github/workflows/api-repository-creation.yml
# For documentation see /documentation/project-admin-api-repository-creation.md
#
# Prerequisites:
# - A GitHub environment named `repository-creation` must exist.
# - The environment must contain a secret `GH_REPO_CREATE_TOKEN`.
# - This token must be a fine-grained personal access token (FGPAT) with the following:
#     • Repository access: Allow access to the template repo and target org repos.
#     • Repository permissions:
#         - Contents: Read and write
#         - Issues: Read and write
#         - Metadata: Read-only
#         - Administration: Read and write (for repo settings, team setup)
#     • Organization permissions:
#         - Members: Read and write (for team creation, management, and user invitations)
#
# See: https://github.com/settings/tokens for generating tokens
#
name: API Repository Creation

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Name of the new repository to create'
        required: true
      subproject_name:
        description: 'Optional: subproject/working group name (leave empty for independent sandbox repo)'
        required: false
      repo_wiki_page:
        description: 'URL of the repository wiki page'
        required: true
      subproject_wiki_page:
        description: 'Optional: URL of the subproject wiki page'
        required: false
      mailinglist_name:
        description: 'Mailing list name in the form "sp-xxx"'
        required: true
      initial_codeowners:
        description: 'Space-separated GitHub usernames (with @) for initial CODEOWNERS'
        required: true
      team_prefix:
        description: 'Repository name in kebab-case, used as prefix for creating {prefix}_maintainers and {prefix}_codeowners teams (leave empty to create no teams)'
        required: false
      dry_run:
        description: 'Dry run mode - validate inputs without creating repository'
        type: boolean
        default: false

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: repository-creation
    permissions:
      issues: write
      contents: write
      actions: write
      pull-requests: write
    
    env:
      TEMPLATE_REPO_NAME: Template_API_Repository
      MAX_RETRIES: 3
      RETRY_WAIT_BASE: 10
      API_WAIT_TIME: 2
      MAX_API_ATTEMPTS: 5
      GH_TOKEN: ${{ secrets.GH_REPO_CREATE_TOKEN }}

    steps:

      - name: Validate inputs
        run: |
          echo "🔍 Validating workflow inputs..."
          
          # Validate repository name format
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          if [[ ! "$REPO_NAME" =~ ^[a-zA-Z0-9._-]+$ ]]; then
            echo "::error::Repository name must contain only letters, numbers, dots, hyphens, and underscores"
            exit 1
          fi
          
          # Validate mailing list format
          MAILINGLIST="${{ github.event.inputs.mailinglist_name }}"
          if [[ ! "$MAILINGLIST" =~ ^sp-[a-z0-9-]+$ ]]; then
            echo "::error::Mailing list must follow format 'sp-xxx' (lowercase letters, numbers, and hyphens only)"
            exit 1
          fi
          
          # Validate codeowners format
          CODEOWNERS="${{ github.event.inputs.initial_codeowners }}"
          for user in $CODEOWNERS; do
            if [[ ! "$user" =~ ^@[a-zA-Z0-9-]+$ ]]; then
              echo "::error::Codeowners must be in format '@username' (found: $user)"
              exit 1
            fi
          done
          
          # Validate URLs format
          REPO_WIKI="${{ github.event.inputs.repo_wiki_page }}"
          if [[ ! "$REPO_WIKI" =~ ^https?:// ]]; then
            echo "::error::Repository wiki page must be a valid URL starting with http:// or https://"
            exit 1
          fi
          
          SUBPROJECT_WIKI="${{ github.event.inputs.subproject_wiki_page }}"
          if [[ -n "$SUBPROJECT_WIKI" ]] && [[ ! "$SUBPROJECT_WIKI" =~ ^https?:// ]]; then
            echo "::error::Subproject wiki page must be a valid URL starting with http:// or https://"
            exit 1
          fi
          
          # Validate team prefix format if provided
          TEAM_PREFIX="${{ github.event.inputs.team_prefix }}"
          if [[ -n "$TEAM_PREFIX" ]] && [[ ! "$TEAM_PREFIX" =~ ^[a-z0-9-]+$ ]]; then
            echo "::error::Team prefix must contain only lowercase letters, numbers, and hyphens"
            exit 1
          fi
          
          echo "✅ All inputs validated successfully"

      - name: Validate token permissions
        run: |
          echo "🔐 Validating token permissions..."
          
          # Check if token secret is available
          if [ -z "${{ secrets.GH_REPO_CREATE_TOKEN }}" ]; then
            echo "::error::GH_REPO_CREATE_TOKEN is not set. Please configure the secret in the 'repository-creation' environment."
            echo "::error::Make sure the 'repository-creation' environment exists and contains the GH_REPO_CREATE_TOKEN secret."
            exit 1
          fi
          
          # Debug: Check token format (without revealing the token)
          TOKEN_LENGTH=$(echo "${{ secrets.GH_REPO_CREATE_TOKEN }}" | wc -c)
          echo "Debug: Token length: $TOKEN_LENGTH characters"
          
          # Validate token has basic access
          echo "Validating token authentication..."
          if ! gh auth status 2>/dev/null; then
            echo "::error::Token authentication failed."
            echo "::error::This usually means:"
            echo "::error::1. Token is invalid, expired, or malformed"
            echo "::error::2. Token doesn't have access to this repository (${{ github.repository }})"
            echo "::error::3. For fine-grained PATs: check repository access includes this repo"
            
            # Try to get more specific error info
            echo "Debug: Attempting to get detailed auth status..."
            gh auth status || true
            exit 1
          fi
          
          echo "✅ Token authentication successful"
          
          # Test repository access
          OWNER=$(echo '${{ github.repository }}' | cut -d'/' -f1)
          if ! gh api user/repos?per_page=1 > /dev/null 2>&1; then
            echo "::error::Token lacks repository access permissions"
            exit 1
          fi
          
          # Test organization access (non-fatal for personal repos)
          if gh api orgs/$OWNER/teams > /dev/null 2>&1; then
            echo "✅ Organization access confirmed - teams will be available"
            echo "ORG_ACCESS=true" >> $GITHUB_ENV
          else
            echo "⚠️  Limited organization access - team operations will be skipped"
            echo "ORG_ACCESS=false" >> $GITHUB_ENV
          fi
          
          echo "✅ Token validation completed"
          
      - name: Checkout template repository
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: actions/checkout@v4
        with:
          repository: camaraproject/${{ env.TEMPLATE_REPO_NAME }}
          token: ${{ secrets.GH_REPO_CREATE_TOKEN }}

      - name: Create new repository and set variables
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "🏗️ Creating new repository..."
          
          REPO_NAME=${{ github.event.inputs.repo_name }}
          # Extract the owner (user or organization) part of the current repository (before the slash)
          OWNER=$(echo '${{ github.repository }}' | cut -d'/' -f1)

          echo "Creating new repository: https://github.com/$OWNER/$REPO_NAME"
          
          # Check if repository already exists
          if gh api repos/$OWNER/$REPO_NAME > /dev/null 2>&1; then
            echo "::error::Repository $OWNER/$REPO_NAME already exists. Please choose a different name."
            exit 1
          fi

          # Retry logic for repository creation with backoff
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Repository creation attempt $RETRY_COUNT of $MAX_RETRIES..."
            
            # Creates a new public repository using the template repository as a template
            if gh repo create "$OWNER/$REPO_NAME" --public --template "$OWNER/${{ env.TEMPLATE_REPO_NAME }}" 2>&1; then
              SUCCESS=true
              echo "✅ Repository created successfully on attempt $RETRY_COUNT"
            else
              echo "❌ Repository creation attempt $RETRY_COUNT failed"
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((RETRY_COUNT * RETRY_WAIT_BASE))
                echo "Waiting ${WAIT_TIME} seconds before retry..."
                sleep $WAIT_TIME
              fi
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "::error::Failed to create repository after $MAX_RETRIES attempts. This may be a temporary GitHub issue."
            echo "::error::Please try again in a few minutes, or check GitHub's status page."
            exit 1
          fi

          # Wait until the repository is fully accessible
          echo "Verifying repository accessibility..."
          for i in $(seq 1 $MAX_API_ATTEMPTS); do
            if gh api repos/$OWNER/$REPO_NAME > /dev/null 2>&1; then
              echo "::notice::Repository $OWNER/$REPO_NAME is now available."
              break
            else
              echo "Waiting for repository $OWNER/$REPO_NAME to become available..."
              sleep $API_WAIT_TIME
            fi
          done

          if ! gh api repos/$OWNER/$REPO_NAME > /dev/null 2>&1; then
            echo "::warning::Repository $OWNER/$REPO_NAME did not become available after $MAX_API_ATTEMPTS attempts. Continuing anyway."
          fi

          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "OWNER=$OWNER" >> $GITHUB_ENV
          
          # Set team configuration variables
          TEAM_PREFIX="${{ github.event.inputs.team_prefix }}"
          if [ -n "$TEAM_PREFIX" ] && [ "$ORG_ACCESS" = "true" ]; then
            echo "TEAM_PREFIX=$TEAM_PREFIX" >> $GITHUB_ENV
            echo "MAINTAINERS_TEAM=${TEAM_PREFIX}_maintainers" >> $GITHUB_ENV
            echo "CODEOWNERS_TEAM=${TEAM_PREFIX}_codeowners" >> $GITHUB_ENV
            echo "TEAMS_ENABLED=true" >> $GITHUB_ENV
            echo "Team operations enabled with prefix: $TEAM_PREFIX"
          else
            echo "TEAMS_ENABLED=false" >> $GITHUB_ENV
            if [ -z "$TEAM_PREFIX" ]; then
              echo "No team prefix provided - skipping all team operations"
            else
              echo "No organization access - skipping all team operations"
            fi
          fi
          
          echo "CODEOWNERS_LIST=${{ github.event.inputs.initial_codeowners }}" >> $GITHUB_ENV

      - name: Check team creation prerequisites
        if: ${{ github.event.inputs.dry_run != 'true' && env.TEAMS_ENABLED == 'true' }}
        run: |
          echo "🔍 Checking team creation prerequisites..."
          
          # Verify parent teams exist
          if ! gh api orgs/$OWNER/teams/maintainers > /dev/null 2>&1; then
            echo "::error::Parent team 'maintainers' does not exist in organization $OWNER"
            exit 1
          fi
          
          if ! gh api orgs/$OWNER/teams/codeowners > /dev/null 2>&1; then
            echo "::error::Parent team 'codeowners' does not exist in organization $OWNER"
            exit 1
          fi
          
          # Get parent team IDs
          MAINTAINERS_PARENT_ID=$(gh api orgs/$OWNER/teams/maintainers | jq -r '.id')
          CODEOWNERS_PARENT_ID=$(gh api orgs/$OWNER/teams/codeowners | jq -r '.id')
          
          echo "MAINTAINERS_PARENT_ID=$MAINTAINERS_PARENT_ID" >> $GITHUB_ENV
          echo "CODEOWNERS_PARENT_ID=$CODEOWNERS_PARENT_ID" >> $GITHUB_ENV
          
          echo "✅ Team creation prerequisites verified"

      - name: Create maintainers team
        if: ${{ github.event.inputs.dry_run != 'true' && env.TEAMS_ENABLED == 'true' }}
        run: |
          echo "👥 Creating maintainers team: $MAINTAINERS_TEAM"
          
          if gh api orgs/$OWNER/teams/$MAINTAINERS_TEAM > /dev/null 2>&1; then
            echo "Team $MAINTAINERS_TEAM already exists. Skipping creation."
          else
            echo "{\"name\": \"$MAINTAINERS_TEAM\", \"description\": \"Maintainers for $REPO_NAME repository (team: $TEAM_PREFIX)\", \"parent_team_id\": $MAINTAINERS_PARENT_ID}" > maintainer_payload.json
            
            if gh api orgs/$OWNER/teams -X POST -H "Accept: application/vnd.github+json" --input maintainer_payload.json; then
              echo "✅ Created maintainers team: $MAINTAINERS_TEAM"
            else
              echo "::error::Failed to create maintainers team"
              exit 1
            fi
          fi

      - name: Create codeowners team
        if: ${{ github.event.inputs.dry_run != 'true' && env.TEAMS_ENABLED == 'true' }}
        run: |
          echo "👥 Creating codeowners team: $CODEOWNERS_TEAM"
          
          if gh api orgs/$OWNER/teams/$CODEOWNERS_TEAM > /dev/null 2>&1; then
            echo "Team $CODEOWNERS_TEAM already exists. Skipping creation."
          else
            echo "{\"name\": \"$CODEOWNERS_TEAM\", \"description\": \"Codeowners for $REPO_NAME repository (team: $TEAM_PREFIX)\", \"parent_team_id\": $CODEOWNERS_PARENT_ID}" > codeowners_payload.json
            
            if gh api orgs/$OWNER/teams -X POST -H "Accept: application/vnd.github+json" --input codeowners_payload.json; then
              echo "✅ Created codeowners team: $CODEOWNERS_TEAM"
            else
              echo "::error::Failed to create codeowners team"
              exit 1
            fi
          fi

      - name: Invite users to codeowners team
        if: ${{ github.event.inputs.dry_run != 'true' && env.TEAMS_ENABLED == 'true' }}
        run: |
          echo "📧 Inviting users to codeowners team..."
          
          CODEOWNERS_LIST=$(echo "$CODEOWNERS_LIST" | xargs)
          echo "Inviting users to team $CODEOWNERS_TEAM: [$CODEOWNERS_LIST]"
          
          for username in $CODEOWNERS_LIST; do
            clean_user=$(echo "$username" | sed 's/^@//')
            echo "Checking if @$clean_user is a valid GitHub user..."
            
            if gh api users/$clean_user > /dev/null 2>&1; then
              echo "Inviting @$clean_user to team $CODEOWNERS_TEAM"
              if gh api orgs/$OWNER/teams/$CODEOWNERS_TEAM/memberships/$clean_user -X PUT -f role=member; then
                echo "✅ Successfully invited @$clean_user"
              else
                echo "::warning::Failed to invite @$clean_user to team"
              fi
            else
              echo "::warning::User @$clean_user does not exist or cannot be looked up. Skipping."
            fi
          done

      - name: Configure repository settings
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "⚙️ Configuring repository settings..."
          
          gh repo edit $OWNER/$REPO_NAME \
            --description "Sandbox API Repository for $REPO_NAME API(s)" \
            --homepage "${{ github.event.inputs.repo_wiki_page }}" \
            --add-topic sandbox-api-repository
            
          gh api -X PATCH repos/$OWNER/$REPO_NAME \
            -F has_discussions=true \
            -F has_issues=true \
            -F has_wiki=false
            
          echo "✅ Repository settings configured"

      - name: Update README.md placeholders
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "📝 Updating README.md placeholders..."
          
          # Replace placeholders in the template README.md and push the updated version to the new repository
          sed -i "s/{{repo_name}}/$REPO_NAME/g" README.md
          sed -i "s|{{repo_wiki_page}}|${{ github.event.inputs.repo_wiki_page }}|g" README.md
          sed -i "s|{{subproject_name}}|${{ github.event.inputs.subproject_name }}|g" README.md
          sed -i "s|{{subproject_wiki_page}}|${{ github.event.inputs.subproject_wiki_page }}|g" README.md
          sed -i "s|{{mailinglist_name}}|${{ github.event.inputs.mailinglist_name }}|g" README.md
          sed -i "s|{{initial_codeowners}}|${{ github.event.inputs.initial_codeowners }}|g" README.md

          # Wait for README.md to appear in the new repo
          SHA=""
          for i in $(seq 1 $MAX_API_ATTEMPTS); do
            SHA=$(gh api repos/$OWNER/$REPO_NAME/contents/README.md 2>/dev/null | jq -r '.sha')
            if [ "$SHA" != "null" ] && [ -n "$SHA" ]; then
              echo "Found README.md sha: $SHA"
              break
            else
              echo "README.md not yet available, retrying in ${API_WAIT_TIME}s..."
              sleep $API_WAIT_TIME
            fi
          done

          gh api repos/$OWNER/$REPO_NAME/contents/README.md \
            -X PUT \
            -F message='Update README.md with project metadata' \
            -F content="$(base64 -w 0 README.md)" \
            -F sha="$SHA"
            
          echo "✅ README.md updated"

      - name: Update issue template config placeholders
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "📋 Updating issue template configuration..."
          
          CONFIG_FILE=".github/ISSUE_TEMPLATE/config.yml"
          if [ -f "$CONFIG_FILE" ]; then
            echo "Updating $CONFIG_FILE placeholders..."
            sed -i "s/{{repo_name}}/$REPO_NAME/g" $CONFIG_FILE

            # Wait for the config.yml file to be available in the new repository
            CONFIG_SHA=""
            for i in $(seq 1 $MAX_API_ATTEMPTS); do
              CONFIG_SHA=$(gh api repos/$OWNER/$REPO_NAME/contents/$CONFIG_FILE 2>/dev/null | jq -r '.sha')
              if [ "$CONFIG_SHA" != "null" ] && [ -n "$CONFIG_SHA" ]; then
                echo "Found $CONFIG_FILE sha: $CONFIG_SHA"
                break
              else
                echo "$CONFIG_FILE not yet available, retrying in ${API_WAIT_TIME}s..."
                sleep $API_WAIT_TIME
              fi
            done

            if [ "$CONFIG_SHA" != "null" ] && [ -n "$CONFIG_SHA" ]; then
              gh api repos/$OWNER/$REPO_NAME/contents/$CONFIG_FILE \
                -X PUT \
                -F message="Update $CONFIG_FILE with project metadata" \
                -F content="$(base64 -w 0 $CONFIG_FILE)" \
                -F sha="$CONFIG_SHA"
              echo "✅ Successfully updated $CONFIG_FILE"
            else
              echo "::warning::Could not find $CONFIG_FILE in the repository. Skipping update."
            fi
          else
            echo "::warning::$CONFIG_FILE not found in template. Skipping update."
          fi

      - name: Set team permissions
        if: ${{ github.event.inputs.dry_run != 'true' && env.TEAMS_ENABLED == 'true' }}
        run: |
          echo "🔐 Setting team permissions..."
          
          # Set maintainers team permissions
          if gh api orgs/$OWNER/teams/$MAINTAINERS_TEAM > /dev/null 2>&1; then
            gh api orgs/$OWNER/teams/$MAINTAINERS_TEAM/repos/$OWNER/$REPO_NAME \
              -X PUT -H "Accept: application/vnd.github+json" -f permission=triage
            echo "✅ Set permissions for $MAINTAINERS_TEAM"
          else
            echo "::error::Team $MAINTAINERS_TEAM does not exist. Cannot assign permissions."
            exit 1
          fi
          
          # Set codeowners team permissions
          if gh api orgs/$OWNER/teams/$CODEOWNERS_TEAM > /dev/null 2>&1; then
            gh api orgs/$OWNER/teams/$CODEOWNERS_TEAM/repos/$OWNER/$REPO_NAME \
              -X PUT -H "Accept: application/vnd.github+json" -f permission=push
            echo "✅ Set permissions for $CODEOWNERS_TEAM"
          else
            echo "::error::Team $CODEOWNERS_TEAM does not exist. Cannot assign permissions."
            exit 1
          fi
          
          # Set admin team permissions
          gh api orgs/$OWNER/teams/admins/repos/$OWNER/$REPO_NAME \
            -X PUT -H "Accept: application/vnd.github+json" -f permission=maintain
          echo "✅ Set permissions for admin team"

      - name: Update CODEOWNERS file
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "👤 Updating CODEOWNERS file..."
          
          # Replace placeholder in CODEOWNERS template with actual list of codeowners
          sed "s|{{initial_codeowners}}|$CODEOWNERS_LIST|g" templates/CODEOWNERS_TEMPLATE > CODEOWNERS
          CODEOWNERS_SHA=$(gh api repos/$OWNER/$REPO_NAME/contents/CODEOWNERS | jq -r '.sha')

          gh api repos/$OWNER/$REPO_NAME/contents/CODEOWNERS \
            -X PUT \
            -F message='Update CODEOWNERS from template' \
            -F content="$(base64 -w 0 CODEOWNERS)" \
            -F sha="$CODEOWNERS_SHA"
            
          echo "✅ CODEOWNERS file updated"

      - name: Create initial issues
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "📋 Creating initial issues..."
          
          ADMIN_ISSUE_URL=$(gh issue create --repo $OWNER/$REPO_NAME \
            --title "New Repository - Initial administrative tasks" \
            --body "$(cat templates/issues/initial-admin.md)")

          gh issue create --repo $OWNER/$REPO_NAME \
            --title "New Repository - Initial tasks for codeowners" \
            --body "$(cat templates/issues/initial-codeowners.md)"

          gh issue comment "$ADMIN_ISSUE_URL" \
            --body "✅ Repository setup has been completed by automation. You may now proceed with the checklist."
            
          echo "✅ Initial issues created"

      - name: Get template files for cleanup
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "🗂️ Identifying template files for cleanup..."
          
          # Find all files in templates directory
          if [ -d "templates" ]; then
            CLEANUP_FILES=$(find templates -type f -name "*" | jq -R -s -c 'split("\n")[:-1]')
            echo "CLEANUP_FILES=$CLEANUP_FILES" >> $GITHUB_ENV
            echo "Found template files for cleanup: $(echo "$CLEANUP_FILES" | jq -r '.[]' | tr '\n' ' ')"
          else
            echo "No templates directory found. Setting empty cleanup list."
            echo "CLEANUP_FILES=[]" >> $GITHUB_ENV
          fi

      - name: Cleanup template files from new repository
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "🧹 Cleaning up template files from new repository..."
          
          # Parse the JSON array of files to delete
          echo "$CLEANUP_FILES" | jq -r '.[]' | while read -r file; do
            if [ -n "$file" ]; then
              echo "Attempting to delete: $file"
              if gh api repos/$OWNER/$REPO_NAME/contents/"$file" > /dev/null 2>&1; then
                sha=$(gh api repos/$OWNER/$REPO_NAME/contents/"$file" | jq -r '.sha')
                if gh api repos/$OWNER/$REPO_NAME/contents/"$file" \
                  -X DELETE \
                  -F message="Remove template file $file from new repository" \
                  -F sha="$sha"; then
                  echo "✅ Deleted $file"
                else
                  echo "::warning::Failed to delete $file"
                fi
              else
                echo "::warning::File $file not found during cleanup. Skipping."
              fi
            fi
          done

      - name: Sync rulesets from template repository
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "📏 Syncing rulesets from template repository..."
          
          TEMPLATE_REPO="${{ env.TEMPLATE_REPO_NAME }}"
          echo "Fetching rulesets from $OWNER/$TEMPLATE_REPO"

          # Fetch all rulesets defined in the template repository for later replication
          RULESETS=$(gh api repos/$OWNER/$TEMPLATE_REPO/rulesets \
            -H "Accept: application/vnd.github+json" 2>/dev/null || echo "[]")

          if ! echo "$RULESETS" | jq -e 'type == "array" and length > 0' > /dev/null; then
            echo "No valid rulesets array found in template repository. Skipping."
            exit 0
          fi

          echo "$RULESETS" | jq -r '.[].id' | while read -r ruleset_id; do
            RULESET=$(gh api repos/$OWNER/$TEMPLATE_REPO/rulesets/$ruleset_id \
              -H "Accept: application/vnd.github+json")
            NAME=$(echo "$RULESET" | jq -r '.name')
            echo "Syncing ruleset: $NAME"

            PAYLOAD=$(echo "$RULESET" | jq 'del(.id, .repository_id, .creator, .created_at, .updated_at)')
            echo "$PAYLOAD" > ruleset.json

            if gh api repos/$OWNER/$REPO_NAME/rulesets \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              --input ruleset.json; then
              echo "✅ Applied ruleset: $NAME"
            else
              echo "::warning::Failed to apply ruleset $NAME"
            fi
          done

      - name: Verify repository setup
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "🔍 Verifying repository setup..."
          
          # Check repository exists and is accessible
          if ! gh api repos/$OWNER/$REPO_NAME > /dev/null 2>&1; then
            echo "::error::Repository verification failed - repository not accessible"
            exit 1
          fi
          
          # Check repository settings
          REPO_INFO=$(gh api repos/$OWNER/$REPO_NAME)
          DESCRIPTION=$(echo "$REPO_INFO" | jq -r '.description')
          HOMEPAGE=$(echo "$REPO_INFO" | jq -r '.homepage')
          HAS_ISSUES=$(echo "$REPO_INFO" | jq -r '.has_issues')
          HAS_DISCUSSIONS=$(echo "$REPO_INFO" | jq -r '.has_discussions')
          
          echo "Repository description: $DESCRIPTION"
          echo "Repository homepage: $HOMEPAGE"
          echo "Issues enabled: $HAS_ISSUES"
          echo "Discussions enabled: $HAS_DISCUSSIONS"
          
          # Verify team permissions (if teams were created)
          TEAM_VERIFICATION=""
          if [ "$TEAMS_ENABLED" = "true" ]; then
            echo "Checking team permissions..."
            
            # Check maintainers team
            if gh api orgs/$OWNER/teams/$MAINTAINERS_TEAM/repos/$OWNER/$REPO_NAME > /dev/null 2>&1; then
              MAINTAINER_PERM=$(gh api orgs/$OWNER/teams/$MAINTAINERS_TEAM/repos/$OWNER/$REPO_NAME | jq -r '.permissions.triage')
              echo "Maintainers team triage permission: $MAINTAINER_PERM"
              TEAM_VERIFICATION="✅ Teams created and configured"
            fi
            
            # Check codeowners team
            if gh api orgs/$OWNER/teams/$CODEOWNERS_TEAM/repos/$OWNER/$REPO_NAME > /dev/null 2>&1; then
              CODEOWNERS_PERM=$(gh api orgs/$OWNER/teams/$CODEOWNERS_TEAM/repos/$OWNER/$REPO_NAME | jq -r '.permissions.push')
              echo "Codeowners team push permission: $CODEOWNERS_PERM"
            fi
          else
            TEAM_VERIFICATION="⚠️ No teams created (no prefix provided or no org access)"
          fi
          
          # Check if CODEOWNERS file exists and has content
          CODEOWNERS_STATUS=""
          if gh api repos/$OWNER/$REPO_NAME/contents/CODEOWNERS > /dev/null 2>&1; then
            echo "✅ CODEOWNERS file exists"
            CODEOWNERS_STATUS="✅ CODEOWNERS file created"
          else
            echo "::warning::CODEOWNERS file not found"
            CODEOWNERS_STATUS="⚠️ CODEOWNERS file not found"
          fi
          
          # Check if issues were created
          ISSUES_COUNT=$(gh api repos/$OWNER/$REPO_NAME/issues | jq length)
          echo "Created issues count: $ISSUES_COUNT"
          
          # Check if template files were cleaned up
          REMAINING_TEMPLATES=0
          CLEANUP_STATUS=""
          if [ -n "$CLEANUP_FILES" ] && [ "$CLEANUP_FILES" != "[]" ]; then
            echo "$CLEANUP_FILES" | jq -r '.[]' | while read -r file; do
              if [ -n "$file" ] && gh api repos/$OWNER/$REPO_NAME/contents/"$file" > /dev/null 2>&1; then
                echo "::warning::Template file still exists: $file"
                REMAINING_TEMPLATES=$((REMAINING_TEMPLATES + 1))
              fi
            done
            
            if [ $REMAINING_TEMPLATES -eq 0 ]; then
              CLEANUP_STATUS="✅ Template files cleaned up"
            else
              CLEANUP_STATUS="⚠️ Some template files remain"
            fi
          else
            CLEANUP_STATUS="ℹ️ No template files to clean up"
          fi
          
          # Create comprehensive success summary
          echo "🎉 Repository setup verification completed" | tee -a $GITHUB_STEP_SUMMARY
          echo "" | tee -a $GITHUB_STEP_SUMMARY
          
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## 🎉 Repository Successfully Created!

          **Repository:** [\`$OWNER/$REPO_NAME\`](https://github.com/$OWNER/$REPO_NAME)

          ### ✅ What Was Configured

          | Component | Status |
          |-----------|--------|
          | **Repository Created** | ✅ `https://github.com/$OWNER/$REPO_NAME` |
          | **Description** | "$DESCRIPTION" |
          | **Homepage** | [$HOMEPAGE]($HOMEPAGE) |
          | **Topics** | \`sandbox-api-repository\` |
          | **Features** | Issues: $HAS_ISSUES, Discussions: $HAS_DISCUSSIONS |
          | **Teams** | $TEAM_VERIFICATION |
          | **CODEOWNERS** | $CODEOWNERS_STATUS |
          | **Issues Created** | ✅ $ISSUES_COUNT initial issues |
          | **Template Cleanup** | $CLEANUP_STATUS |

          EOF
          
          # Add team details if teams were created
          if [ "$TEAMS_ENABLED" = "true" ]; then
            cat << EOF >> $GITHUB_STEP_SUMMARY
          ### 👥 Teams Created

          - **\`$MAINTAINERS_TEAM\`** - Triage permissions
          - **\`$CODEOWNERS_TEAM\`** - Push permissions (includes: ${{ github.event.inputs.initial_codeowners }})

          EOF
          fi
          
          # Add file updates summary
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ### 📄 Files Updated

          - **README.md** - Updated with project metadata and wiki links
          - **CODEOWNERS** - Generated with specified codeowners: \`${{ github.event.inputs.initial_codeowners }}\`
          - **.github/ISSUE_TEMPLATE/config.yml** - Updated with repository name
          - **Branch protection rules** - Synced from template repository

          ### 📋 Initial Issues Created

          1. **Administrative Tasks** - Checklist for repository setup completion
          2. **Codeowner Tasks** - Initial responsibilities and setup guide

          ### 🔐 Security & Permissions

          - Repository rulesets applied from \`Template_API_Repository\`
          - Branch protection rules configured
          - Team permissions assigned appropriately
          - CODEOWNERS file enforces code review requirements

          ---

          ## 🚀 Next Steps

          **Your new repository is ready!** Here's what to do next:

          1. **📋 Complete the checklists** - Check the issues in your new repository
          2. **🔍 Review settings** - Verify all configurations meet your needs  
          3. **👥 Team setup** - Ensure all team members have accepted invitations
          4. **📚 Add content** - Start developing your API documentation and code
          5. **🔗 Share** - Notify your team that the repository is ready

          **Repository URL:** [\`https://github.com/$OWNER/$REPO_NAME\`](https://github.com/$OWNER/$REPO_NAME)

          ---

          ### 📊 Configuration Summary

          | Setting | Value |
          |---------|-------|
          | **Subproject** | ${{ github.event.inputs.subproject_name || '_None_' }} |
          | **Wiki Page** | [${{ github.event.inputs.repo_wiki_page }}](${{ github.event.inputs.repo_wiki_page }}) |
          | **Subproject Wiki** | ${{ github.event.inputs.subproject_wiki_page || '_None_' }} |
          | **Mailing List** | \`${{ github.event.inputs.mailinglist_name }}\` |

          EOF
          
          echo "✅ Repository setup verification completed"
          echo "🎉 Repository https://github.com/$OWNER/$REPO_NAME has been successfully created and configured!"

      - name: Dry run summary
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "🏃‍♂️ DRY RUN MODE - No repository created" | tee -a $GITHUB_STEP_SUMMARY
          echo "" | tee -a $GITHUB_STEP_SUMMARY
          echo "✅ Input validation passed" | tee -a $GITHUB_STEP_SUMMARY
          echo "✅ Token permissions verified" | tee -a $GITHUB_STEP_SUMMARY
          echo "" | tee -a $GITHUB_STEP_SUMMARY
          
          # Create formatted summary
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          ## 📋 Dry Run Summary - What Would Be Created

          | Setting | Value |
          |---------|-------|
          | **Repository Name** | `${{ github.event.inputs.repo_name }}` |
          | **Wiki Page** | ${{ github.event.inputs.repo_wiki_page }} |
          | **Subproject** | ${{ github.event.inputs.subproject_name || '_None specified_' }} |
          | **Subproject Wiki** | ${{ github.event.inputs.subproject_wiki_page || '_None specified_' }} |
          | **Mailing List** | `${{ github.event.inputs.mailinglist_name }}` |
          | **Initial Codeowners** | `${{ github.event.inputs.initial_codeowners }}` |
          | **Team Prefix** | `${{ github.event.inputs.team_prefix || '_None - no teams will be created_' }}` |

          EOF
          
          # Add team information
          if [ -n "${{ github.event.inputs.team_prefix }}" ] && [ "$ORG_ACCESS" = "true" ]; then
            cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          ## 🔧 Teams That Would Be Created

          - `${{ github.event.inputs.team_prefix }}_maintainers` (under maintainers team)
          - `${{ github.event.inputs.team_prefix }}_codeowners` (under codeowners team)

          **Team Permissions:**
          - Maintainers team: `triage` permission
          - Codeowners team: `push` permission  
          - Admin team: `maintain` permission

          EOF
          else
            cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          ## 🚫 Team Creation

          No teams would be created because:
          EOF
            
            if [ -z "${{ github.event.inputs.team_prefix }}" ]; then
              echo "- No team prefix provided" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "$ORG_ACCESS" != "true" ]; then
              echo "- No organization access available" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add repository settings
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          ## ⚙️ Repository Configuration

          - **Description:** "Sandbox API Repository for ${{ github.event.inputs.repo_name }} API(s)"
          - **Homepage:** ${{ github.event.inputs.repo_wiki_page }}
          - **Topics:** `sandbox-api-repository`
          - **Features:** Issues ✅, Discussions ✅, Wiki ❌

          ## 📄 Files That Would Be Updated

          - `README.md` - Updated with project metadata
          - `CODEOWNERS` - Generated from template with specified users
          - `.github/ISSUE_TEMPLATE/config.yml` - Updated with repository name
          - Initial issues created for admin and codeowner tasks

          ## 🛡️ Security & Permissions

          - Branch protection rules synced from template repository
          - Repository rulesets applied from `Template_API_Repository`
          - Template files cleaned up after setup

          ---

          ## ✅ Next Steps

          **To create this repository for real:**
          1. Run this workflow again
          2. **Leave** "Dry run mode" unchecked (default behavior)
          3. Keep all other inputs the same
          4. Click "Run workflow"

          **Repository URL (when created):** `https://github.com/${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}`

          EOF
          
          # Also log to console for workflow logs
          echo ""
          echo "📋 Summary of what would be created:"
          echo "Repository: ${{ github.event.inputs.repo_name }}"
          echo "Wiki page: ${{ github.event.inputs.repo_wiki_page }}"
          echo "Subproject: ${{ github.event.inputs.subproject_name }}"
          echo "Subproject wiki: ${{ github.event.inputs.subproject_wiki_page }}"
          echo "Mailing list: ${{ github.event.inputs.mailinglist_name }}"
          echo "Initial codeowners: ${{ github.event.inputs.initial_codeowners }}"
          echo "Team prefix: ${{ github.event.inputs.team_prefix }}"
          echo ""
          if [ -n "${{ github.event.inputs.team_prefix }}" ] && [ "$ORG_ACCESS" = "true" ]; then
            echo "🔧 Teams that would be created:"
            echo "  - ${{ github.event.inputs.team_prefix }}_maintainers"
            echo "  - ${{ github.event.inputs.team_prefix }}_codeowners"
          else
            echo "🚫 No teams would be created (no prefix provided or no org access)"
          fi
          echo ""
          echo "To create the repository, run this workflow again without the 'dry_run' option."